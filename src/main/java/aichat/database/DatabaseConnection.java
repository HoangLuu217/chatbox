package aichat.database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.atomic.AtomicInteger;

public class DatabaseConnection {
    private static DatabaseConnection instance;
    private Connection connection;
    private final AtomicInteger activeConnections = new AtomicInteger(0);
    
    private static final String DB_URL = "jdbc:sqlserver://localhost:1433;databaseName=AI;encrypt=true;trustServerCertificate=true";
    private static final String USER = "sa";  // Replace with your SQL Server username
    private static final String PASSWORD = "12345";  // Replace with your SQL Server password
    
    private DatabaseConnection() {
        // Private constructor to prevent instantiation
    }
    
    public static DatabaseConnection getInstance() {
        if (instance == null) {
            synchronized (DatabaseConnection.class) {
                if (instance == null) {
                    instance = new DatabaseConnection();
                }
            }
        }
        return instance;
    }
    
    public Connection getConnection() throws SQLException {
        synchronized (this) {
            if (connection == null || connection.isClosed()) {
                try {
                    // Load the SQL Server JDBC driver
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    connection = DriverManager.getConnection(DB_URL, USER, PASSWORD);
                    connection.setAutoCommit(true); // Enable auto-commit
                   // System.out.println("Database connection established successfully.");
                } catch (ClassNotFoundException e) {
                    throw new SQLException("SQL Server JDBC Driver not found.", e);
                } catch (SQLException e) {
                    throw new SQLException("Failed to connect to database.", e);
                }
            }
            return connection;
        }
    }
    
    public void closeConnection() {
        synchronized (this) {
            try {
                if (connection != null && !connection.isClosed()) {
                    connection.close();
                    System.out.println("Database connection closed successfully.");
                }
            } catch (SQLException e) {
                System.err.println("Error closing connection: " + e.getMessage());
            } finally {
                connection = null;
            }
        }
    }
    
    public ResultSet executeQuery(String query) throws SQLException {
        Connection conn = getConnection();
        Statement stmt = conn.createStatement();
        return stmt.executeQuery(query);
    }
    
    public int executeUpdate(String query) throws SQLException {
        Connection conn = getConnection();
        Statement stmt = conn.createStatement();
        return stmt.executeUpdate(query);
    }
    
    public PreparedStatement prepareStatement(String query) throws SQLException {
        Connection conn = getConnection();
        return conn.prepareStatement(query);
    }
    
    public PreparedStatement prepareStatement(String query, int autoGeneratedKeys) throws SQLException {
        Connection conn = getConnection();
        return conn.prepareStatement(query, autoGeneratedKeys);
    }
    
    // Example method to test the connection
    public boolean testConnection() {
        try {
            Connection conn = getConnection();
            return conn != null && !conn.isClosed();
        } catch (SQLException e) {
            System.err.println("Database connection test failed: " + e.getMessage());
            return false;
        }
    }
} 